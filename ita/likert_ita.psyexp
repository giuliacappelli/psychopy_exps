<?xml version="1.0" ?>
<PsychoPy2experiment version="2020.2.10" encoding="utf-8">
  <Settings>
    <Param name="Audio latency priority" val="use prefs" valType="str" updates="None"/>
    <Param name="Audio lib" val="use prefs" valType="str" updates="None"/>
    <Param name="Completed URL" val="" valType="str" updates="None"/>
    <Param name="Data file delimiter" val="auto" valType="str" updates="None"/>
    <Param name="Data filename" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>
    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>
    <Param name="Experiment info" val="{'participant': '', 'session': '001'}" valType="code" updates="None"/>
    <Param name="Force stereo" val="True" valType="bool" updates="None"/>
    <Param name="Full-screen window" val="False" valType="bool" updates="None"/>
    <Param name="HTML path" val="html" valType="str" updates="None"/>
    <Param name="Incomplete URL" val="" valType="str" updates="None"/>
    <Param name="JS libs" val="packaged" valType="str" updates="None"/>
    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>
    <Param name="Resources" val="[]" valType="fileList" updates="None"/>
    <Param name="Save csv file" val="False" valType="bool" updates="None"/>
    <Param name="Save excel file" val="False" valType="bool" updates="None"/>
    <Param name="Save log file" val="True" valType="bool" updates="None"/>
    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>
    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>
    <Param name="Screen" val="1" valType="num" updates="None"/>
    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>
    <Param name="Show mouse" val="False" valType="bool" updates="None"/>
    <Param name="Units" val="height" valType="str" updates="None"/>
    <Param name="Use version" val="" valType="str" updates="None"/>
    <Param name="Window size (pixels)" val="[1000, 600]" valType="code" updates="None"/>
    <Param name="blendMode" val="avg" valType="str" updates="None"/>
    <Param name="color" val="$[0.859,0.639,0.380]" valType="str" updates="None"/>
    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>
    <Param name="expName" val="survey" valType="str" updates="None"/>
    <Param name="exportHTML" val="on Sync" valType="str" updates="None"/>
    <Param name="logging level" val="exp" valType="code" updates="None"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <PolygonComponent name="polygon_4">
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="lineWidth" val="1" valType="code" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="name" val="polygon_4" valType="code" updates="None"/>
        <Param name="opacity" val="0.5" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.25)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="shape" val="rectangle" valType="str" updates="constant"/>
        <Param name="size" val="(1, 0.1)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </PolygonComponent>
      <TextComponent name="questionText">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
        <Param name="name" val="questionText" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.10)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="$sentence" valType="str" updates="set every repeat"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <SliderComponent name="slider">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="False" valType="bool" updates="constant"/>
        <Param name="font" val="HelveticaBold" valType="str" updates="constant"/>
        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>
        <Param name="granularity" val="1" valType="code" updates="constant"/>
        <Param name="labels" val="'1 \r\n \r\n del tutto  \r\n inaccettabile', '2', '3', '4 \r\n \r\n usa tutta  \r\n la scala!', '5', '6', '7 \r\n \r\n del tutto  \r\n accettabile'" valType="list" updates="constant"/>
        <Param name="name" val="slider" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.2)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="size" val="(1.0, 0.03)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="condition" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="storeHistory" val="False" valType="bool" updates="constant"/>
        <Param name="storeRating" val="True" valType="bool" updates="constant"/>
        <Param name="storeRatingTime" val="True" valType="bool" updates="constant"/>
        <Param name="styles" val="('radio',)" valType="fixedList" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="ticks" val="(1, 2, 3, 4, 5, 6, 7)" valType="list" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </SliderComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" val="'space'," valType="code" updates="set every repeat"/>
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_4" valType="code" updates="None"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="condition" valType="str" updates="None"/>
        <Param name="startVal" val="slider.rating" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="store" val="nothing" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="anticheat">
        <Param name="Before Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Before JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Experiment" val="kickout_count = 0" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Experiment" val="kickout_count = 0;&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Routine" val="msg_kickout = ((((&quot;Risposte sbagliate: &quot; + kickout_count.toString()) + &quot;. Hai a disposizione altri &quot;) + (5 - kickout_count).toString()) + &quot; tentativi.&quot;);&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="Begin Routine" val="msg_kickout=&quot;Risposte sbagliate: &quot;+str(kickout_count)+&quot;. Hai a disposizione altri &quot;+str(5-kickout_count)+&quot; tentativi.&quot;" valType="extendedCode" updates="constant"/>
        <Param name="Code Type" val="Auto-&gt;JS" valType="str" updates="None"/>
        <Param name="Each Frame" val="#msg_kickout = &quot;&quot;&amp;#10;&amp;#10;if slider.getRating() is not None:&amp;#10;    cond_filler= (kind==&quot;FILLER&quot; and slider.getRating()&gt;3.0)&amp;#10;    cond_control = (kind==&quot;CONTROL&quot; and slider.getRating()&lt;5.0)&amp;#10;    if key_resp_4.keys == &quot;space&quot;:    &amp;#10;        if cond_filler or cond_control:&amp;#10;            #msg_kickout=&quot;iiiii &quot;+str(kickout_count)&amp;#10;            msg_kickout=&quot;Attenzione! Questa è una domanda di controllo, la tua risposta è errata. Clicca su un altro punteggio! L'esperimento continuerà quando fornirai una risposta adeguata.&quot;&amp;#10;            if kickout_count == 5:&amp;#10;                psychoJS.quit()&amp;#10;        else:&amp;#10;            #msg_kickout=&quot;Ottimo lavoro!&quot;&amp;#10;            continueRoutine = False" valType="extendedCode" updates="constant"/>
        <Param name="Each JS Frame" val="if ((slider.getRating() !== null)) {&amp;#10;    cond_filler = ((kind === &quot;FILLER&quot;) &amp;&amp; (slider.getRating() &gt; 3.0));&amp;#10;    cond_control = ((kind === &quot;CONTROL&quot;) &amp;&amp; (slider.getRating() &lt; 5.0));&amp;#10;    if ((key_resp_4.keys === &quot;space&quot;)) {&amp;#10;        if ((cond_filler || cond_control)) {&amp;#10;            msg_kickout = &quot;Attenzione! Questa \u00e8 una domanda di controllo, la tua risposta \u00e8 errata. Clicca su un altro punteggio! L'esperimento continuer\u00e0 quando fornirai una risposta adeguata.&quot;;&amp;#10;            if ((kickout_count === 5)) {&amp;#10;                psychoJS.quit();&amp;#10;            }&amp;#10;        } else {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Routine" val="if ((msg_kickout === &quot;Attenzione! Questa \u00e8 una domanda di controllo, la tua risposta \u00e8 errata. Clicca su un altro punteggio! L'esperimento continuer\u00e0 quando fornirai una risposta adeguata.&quot;)) {&amp;#10;    kickout_count += 1;&amp;#10;} else {&amp;#10;    msg_kickout = msg_kickout;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="if msg_kickout == &quot;Attenzione! Questa è una domanda di controllo, la tua risposta è errata. Clicca su un altro punteggio! L'esperimento continuerà quando fornirai una risposta adeguata.&quot;:&amp;#10;    kickout_count += 1&amp;#10;else:&amp;#10;    msg_kickout = msg_kickout" valType="extendedCode" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="name" val="anticheat" valType="code" updates="None"/>
      </CodeComponent>
      <TextComponent name="tips">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.03" valType="code" updates="constant"/>
        <Param name="name" val="tips" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.25)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Clicca su un valore, poi premi SPAZIO per continuare." valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <CodeComponent name="pleasework">
        <Param name="Before Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Before JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Experiment" val="exp_target_loop = 0;" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Experiment" val="exp_target_loop = 0;&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Routine" val="feedbackMsg = ((((&quot;hai completato &quot; + exp_target_loop.toString()) + &quot; frasi su &quot;) + trials.nTotal.toString()) + &quot;!&quot;);&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="Begin Routine" val="feedbackMsg = 'hai completato ' + str(exp_target_loop) +' frasi su ' + str(trials.nTotal) +'!'" valType="extendedCode" updates="constant"/>
        <Param name="Code Type" val="Auto-&gt;JS" valType="str" updates="None"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each JS Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Routine" val="exp_target_loop += 1;&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="exp_target_loop += 1;" valType="extendedCode" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="name" val="pleasework" valType="code" updates="None"/>
      </CodeComponent>
      <TextComponent name="text_2">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.03" valType="code" updates="constant"/>
        <Param name="name" val="text_2" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.35)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="$feedbackMsg" valType="extendedStr" updates="set every repeat"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="title">
        <Param name="color" val="$[0.004,-0.749,-0.749]" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.035" valType="code" updates="constant"/>
        <Param name="name" val="title" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(-0.35, 0.45)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Questo è l'esperimento vero e proprio!" valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="text_3">
        <Param name="color" val="$[-0.663,-0.890,-0.890]" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.03" valType="code" updates="constant"/>
        <Param name="name" val="text_3" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.1)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="$msg_kickout" valType="extendedStr" updates="set every frame"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <PolygonComponent name="polygon_5">
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="fillColor" val="$[0.859,-0.914,-0.914]" valType="str" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineColor" val="$[0.859,-0.914,-0.914]" valType="str" updates="constant"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="lineWidth" val="1" valType="code" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="name" val="polygon_5" valType="code" updates="None"/>
        <Param name="opacity" val="0.3" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.1)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="shape" val="rectangle" valType="str" updates="constant"/>
        <Param name="size" val="(1, 0.1)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </PolygonComponent>
    </Routine>
    <Routine name="consent">
      <TextComponent name="form">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
        <Param name="name" val="form" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.1)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Nel questionario non ti saranno chieste informazioni personali. Non sarà possibile per nessuno risalire alla tua identità a partire dalle risposte che darai nel questionario. I dati che fornirai saranno usati ai fini di questo esperimento linguistico e potranno essere condivisi con terzi in forma anonima. Completando il questionario, dichiari di accettare questi termini. Se abbandoni il questionario in anticipo, i tuoi dati non saranno usati nello studio e non riceverai alcun compenso.&amp;#10;&amp;#10;Dovrai usare un computer con tastiera!" valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" val="'y','n'" valType="code" updates="constant"/>
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp" valType="code" updates="None"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="store" val="nothing" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param name="Before Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Before JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Code Type" val="Auto-&gt;JS" valType="str" updates="None"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each JS Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Routine" val="if ((key_resp.keys === &quot;n&quot;)) {&amp;#10;    psychoJS.quit();&amp;#10;} else {&amp;#10;    if ((key_resp.keys === &quot;y&quot;)) {&amp;#10;        continueRoutine = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="if key_resp.keys == &quot;n&quot;:&amp;#10;    #core.quit()&amp;#10;    psychoJS.quit()&amp;#10;elif key_resp.keys == &quot;y&quot;:&amp;#10;    continueRoutine = True" valType="extendedCode" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="name" val="code_2" valType="code" updates="None"/>
      </CodeComponent>
      <PolygonComponent name="polygon">
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="lineWidth" val="1" valType="code" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="name" val="polygon" valType="code" updates="None"/>
        <Param name="opacity" val="0.5" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.4)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="shape" val="rectangle" valType="str" updates="constant"/>
        <Param name="size" val="(1, 0.15)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </PolygonComponent>
      <TextComponent name="accept_or_no">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.07" valType="code" updates="constant"/>
        <Param name="name" val="accept_or_no" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.4)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Premi Y per continuare o N per uscire." valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
    </Routine>
    <Routine name="instr">
      <PolygonComponent name="polygon_2">
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="lineWidth" val="1" valType="code" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="name" val="polygon_2" valType="code" updates="None"/>
        <Param name="opacity" val="0.5" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.4)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="shape" val="rectangle" valType="str" updates="constant"/>
        <Param name="size" val="(1, 0.15)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </PolygonComponent>
      <TextComponent name="instr_allow">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.07" valType="code" updates="constant"/>
        <Param name="name" val="instr_allow" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.4)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Premi Y per continuare o N per uscire." valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="instructions">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
        <Param name="name" val="instructions" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.1)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="$instrflow" valType="extendedStr" updates="set every repeat"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" val="'y','n'" valType="code" updates="constant"/>
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_3" valType="code" updates="None"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="store" val="nothing" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="code_4">
        <Param name="Before Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Before JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Code Type" val="Auto-&gt;JS" valType="str" updates="None"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each JS Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Routine" val="if ((key_resp_3.keys === &quot;n&quot;)) {&amp;#10;    psychoJS.quit();&amp;#10;} else {&amp;#10;    if ((key_resp_3.keys === &quot;y&quot;)) {&amp;#10;        continueRoutine = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="if key_resp_3.keys == &quot;n&quot;:&amp;#10;    #core.quit()&amp;#10;    psychoJS.quit()&amp;#10;elif key_resp_3.keys == &quot;y&quot;:&amp;#10;    continueRoutine = True" valType="extendedCode" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="name" val="code_4" valType="code" updates="None"/>
      </CodeComponent>
    </Routine>
    <Routine name="thanks">
      <TextComponent name="text_9">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
        <Param name="name" val="text_9" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.3)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="5" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="" valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <CodeComponent name="code_7">
        <Param name="Before Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Before JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Routine" val="startTime = new Date();&amp;#10;text_9.text = ''" valType="extendedCode" updates="constant"/>
        <Param name="Begin Routine" val="text_9.text = ''" valType="extendedCode" updates="constant"/>
        <Param name="Code Type" val="Both" valType="str" updates="None"/>
        <Param name="Each Frame" val="text_9.text = str(round(5+routineTimer.getTime()))" valType="extendedCode" updates="constant"/>
        <Param name="Each JS Frame" val="leftTime = new Date();&amp;#10;timeelapsed = (startTime - leftTime)/1000&amp;#10;text_9.text = Math.round(5+timeelapsed)" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="name" val="code_7" valType="code" updates="None"/>
      </CodeComponent>
      <TextComponent name="goodbye">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>
        <Param name="name" val="goodbye" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="5" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Grazie per la collaborazione! &amp;#10;&amp;#10;Il questionario finirà tra" valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
    </Routine>
    <Routine name="demo">
      <PolygonComponent name="polygon_3">
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="lineWidth" val="1" valType="code" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="name" val="polygon_3" valType="code" updates="None"/>
        <Param name="opacity" val="0.5" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.2)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="shape" val="rectangle" valType="str" updates="constant"/>
        <Param name="size" val="(1, 0.15)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </PolygonComponent>
      <TextComponent name="democheck">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.07" valType="code" updates="constant"/>
        <Param name="name" val="democheck" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.2)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Premi Y per rispondere &quot;sì&quot; o N per rispondere &quot;no&quot;." valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="survey">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
        <Param name="name" val="survey" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.2)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="$question" valType="extendedStr" updates="set every repeat"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" val="'y', 'n'" valType="code" updates="constant"/>
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_2" valType="code" updates="None"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="store" val="nothing" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>
      </KeyboardComponent>
      <CodeComponent name="code_3">
        <Param name="Before Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Before JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Code Type" val="Auto-&gt;JS" valType="str" updates="None"/>
        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="Each JS Frame" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Routine" val="if ((key_resp_2.keys === &quot;n&quot;)) {&amp;#10;    psychoJS.quit();&amp;#10;} else {&amp;#10;    if ((key_resp_2.keys === &quot;y&quot;)) {&amp;#10;        continueRoutine = true;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="if key_resp_2.keys == &quot;n&quot;:&amp;#10;    #core.quit()&amp;#10;    psychoJS.quit()&amp;#10;elif key_resp_2.keys == &quot;y&quot;:&amp;#10;    continueRoutine = True" valType="extendedCode" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="name" val="code_3" valType="code" updates="None"/>
      </CodeComponent>
    </Routine>
    <Routine name="train">
      <PolygonComponent name="polygon_6">
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="fillColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="interpolate" val="linear" valType="str" updates="constant"/>
        <Param name="lineColor" val="$[1,1,1]" valType="str" updates="constant"/>
        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="lineWidth" val="1" valType="code" updates="constant"/>
        <Param name="nVertices" val="4" valType="int" updates="constant"/>
        <Param name="name" val="polygon_6" valType="code" updates="None"/>
        <Param name="opacity" val="0.5" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.2)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="shape" val="rectangle" valType="str" updates="constant"/>
        <Param name="size" val="(1, 0.1)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </PolygonComponent>
      <TextComponent name="questionText_2">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
        <Param name="name" val="questionText_2" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="$trainer" valType="str" updates="set every repeat"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <SliderComponent name="slider_2">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="False" valType="bool" updates="constant"/>
        <Param name="font" val="HelveticaBold" valType="str" updates="constant"/>
        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>
        <Param name="granularity" val="1" valType="code" updates="constant"/>
        <Param name="labels" val="'1 \r\n \r\n del tutto  \r\n inaccettabile', '2', '3', '4', '5', '6', '7 \r\n \r\n del tutto  \r\n accettabile'" valType="list" updates="constant"/>
        <Param name="name" val="slider_2" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, -0.2)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="size" val="(1.0, 0.03)" valType="code" updates="constant"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="condition" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="storeHistory" val="False" valType="bool" updates="constant"/>
        <Param name="storeRating" val="True" valType="bool" updates="constant"/>
        <Param name="storeRatingTime" val="True" valType="bool" updates="constant"/>
        <Param name="styles" val="['radio']" valType="fixedList" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="ticks" val="(1, 2, 3, 4, 5, 6, 7)" valType="list" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
      </SliderComponent>
      <CodeComponent name="anticheat_2">
        <Param name="Before Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Before JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin JS Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="Code Type" val="Auto-&gt;JS" valType="str" updates="None"/>
        <Param name="Each Frame" val="msg = &quot;Clicca su un valore e premi F per continuare&quot;&amp;#10;if slider_2.getRating() is not None:&amp;#10;    cond_filler2= (kind2==&quot;BAD&quot; and slider_2.getRating()&gt;2.0)&amp;#10;    cond_control2= (kind2==&quot;GOOD&quot; and slider_2.getRating()&lt;6.0)&amp;#10;    if key_resp_6.keys == &quot;f&quot;:&amp;#10;        if cond_filler2 or cond_control2:&amp;#10;            #continueRoutine = True&amp;#10;            msg = &quot;Oh, no! Prova di nuovo e premi F sulla tastiera&quot;&amp;#10;        else:&amp;#10;            #continueRoutine = False&amp;#10;            msg = &quot;Sì! Premi SPAZIO per continuare&quot;&amp;#10;    if key_resp_6.keys == &quot;space&quot;:&amp;#10;        continueRoutine = False" valType="extendedCode" updates="constant"/>
        <Param name="Each JS Frame" val="msg = &quot;Clicca su un valore e premi F per continuare&quot;;&amp;#10;if ((slider_2.getRating() !== null)) {&amp;#10;    cond_filler2 = ((kind2 === &quot;BAD&quot;) &amp;&amp; (slider_2.getRating() &gt; 2.0));&amp;#10;    cond_control2 = ((kind2 === &quot;GOOD&quot;) &amp;&amp; (slider_2.getRating() &lt; 6.0));&amp;#10;    if ((key_resp_6.keys === &quot;f&quot;)) {&amp;#10;        if ((cond_filler2 || cond_control2)) {&amp;#10;            msg = &quot;Oh, no! Prova di nuovo e premi F sulla tastiera&quot;;&amp;#10;        } else {&amp;#10;            msg = &quot;S\u00ec! Premi SPAZIO per continuare&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;    if ((key_resp_6.keys === &quot;space&quot;)) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant"/>
        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Experiment" val="" valType="extendedCode" updates="constant"/>
        <Param name="End JS Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="name" val="anticheat_2" valType="code" updates="None"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_6">
        <Param name="allowedKeys" val="'space','f'" valType="code" updates="set every repeat"/>
        <Param name="correctAns" val="" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="discard previous" val="True" valType="bool" updates="constant"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>
        <Param name="name" val="key_resp_6" valType="code" updates="None"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="condition" valType="str" updates="None"/>
        <Param name="startVal" val="slider_2.rating" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="store" val="nothing" valType="str" updates="constant"/>
        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="constant"/>
      </KeyboardComponent>
      <TextComponent name="tips_2">
        <Param name="color" val="black" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.05" valType="code" updates="constant"/>
        <Param name="name" val="tips_2" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.35)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="Questa è una sessione di allenamento. Prova quante volte vuoi!" valType="extendedStr" updates="constant"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
      <TextComponent name="text">
        <Param name="color" val="$[-0.663,-0.890,-0.890]" valType="str" updates="constant"/>
        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>
        <Param name="disabled" val="False" valType="bool" updates="None"/>
        <Param name="durationEstim" val="" valType="code" updates="None"/>
        <Param name="flip" val="" valType="str" updates="constant"/>
        <Param name="font" val="Arial" valType="str" updates="constant"/>
        <Param name="languageStyle" val="LTR" valType="str" updates="None"/>
        <Param name="letterHeight" val="0.04" valType="code" updates="constant"/>
        <Param name="name" val="text" valType="code" updates="None"/>
        <Param name="opacity" val="1" valType="code" updates="constant"/>
        <Param name="ori" val="0" valType="code" updates="constant"/>
        <Param name="pos" val="(0, 0.2)" valType="code" updates="constant"/>
        <Param name="saveStartStop" val="True" valType="bool" updates="None"/>
        <Param name="startEstim" val="" valType="code" updates="None"/>
        <Param name="startType" val="time (s)" valType="str" updates="None"/>
        <Param name="startVal" val="0.0" valType="code" updates="None"/>
        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>
        <Param name="stopVal" val="" valType="code" updates="constant"/>
        <Param name="syncScreenRefresh" val="True" valType="bool" updates="None"/>
        <Param name="text" val="$msg" valType="extendedStr" updates="set every frame"/>
        <Param name="units" val="from exp settings" valType="str" updates="None"/>
        <Param name="wrapWidth" val="" valType="code" updates="constant"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="consent"/>
    <LoopInitiator loopType="TrialHandler" name="trials_3">
      <Param name="Selected rows" val="" valType="str" updates="None"/>
      <Param name="conditions" val="[OrderedDict([('instrflow', 'This survey takes - minutes on average to complete, and you will be rewarded € -.- as compensation if you complete the survey. \\r\n \\r\n You will see a series of sentences, one by one. For each, you are asked to judge how acceptable it is to you on a graded scale. You should rate a sentence 1 if it sounds utterly bad, 7 if it sounds perfectly fine, or choose any in-between score if you think it applies.')]), OrderedDict([('instrflow', 'Let us consider some examples: \\r\n \\r\n &gt; John laughs stories.\\r\n This sentence should score 1, because you can’t &quot;laugh something&quot;. \\r\n \\r\n &gt; Mario walked on the path. \\r\n This sentence should score 7, because it’s perfectly acceptable.')]), OrderedDict([('instrflow', 'This is not an exam! By virtue of being a native speaker of English, you will provide the right answers. Beware: to avoid cheating and random clicking, the survey is interspersed with hidden control questions. If you fail them, you will be kicked out of the survey and receive no compensation.')])]" valType="str" updates="None"/>
      <Param name="conditionsFile" val="resources/instructions_2.csv" valType="str" updates="None"/>
      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>
      <Param name="isTrials" val="True" valType="bool" updates="None"/>
      <Param name="loopType" val="sequential" valType="str" updates="None"/>
      <Param name="nReps" val="1" valType="code" updates="None"/>
      <Param name="name" val="trials_3" valType="code" updates="None"/>
      <Param name="random seed" val="" valType="code" updates="None"/>
    </LoopInitiator>
    <Routine name="instr"/>
    <LoopTerminator name="trials_3"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" val="" valType="str" updates="None"/>
      <Param name="conditions" val="[OrderedDict([('question', 'Are you a native speaker of English?')]), OrderedDict([('question', 'Have you got a Bachelor’s (or higher) degree?')]), OrderedDict([('question', 'Have you understood the instructions above?')])]" valType="str" updates="None"/>
      <Param name="conditionsFile" val="resources/demographics.csv" valType="str" updates="None"/>
      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>
      <Param name="isTrials" val="True" valType="bool" updates="None"/>
      <Param name="loopType" val="sequential" valType="str" updates="None"/>
      <Param name="nReps" val="1" valType="code" updates="None"/>
      <Param name="name" val="trials_2" valType="code" updates="None"/>
      <Param name="random seed" val="" valType="code" updates="None"/>
    </LoopInitiator>
    <Routine name="demo"/>
    <LoopTerminator name="trials_2"/>
    <LoopInitiator loopType="TrialHandler" name="trials_4">
      <Param name="Selected rows" val="" valType="str" updates="None"/>
      <Param name="conditions" val="[OrderedDict([('ids', 'train1'), ('trainer', 'N1 Mario ha mangiato.')]), OrderedDict([('ids', 'train2'), ('trainer', 'N2 Mario ha dormito un cuscino.')])]" valType="str" updates="None"/>
      <Param name="conditionsFile" val="resources/trainers.csv" valType="str" updates="None"/>
      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>
      <Param name="isTrials" val="True" valType="bool" updates="None"/>
      <Param name="loopType" val="sequential" valType="str" updates="None"/>
      <Param name="nReps" val="1" valType="code" updates="None"/>
      <Param name="name" val="trials_4" valType="code" updates="None"/>
      <Param name="random seed" val="" valType="code" updates="None"/>
    </LoopInitiator>
    <Routine name="train"/>
    <LoopTerminator name="trials_4"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" val="" valType="str" updates="None"/>
      <Param name="conditions" val="[OrderedDict([('ids', 'stim1'), ('kind', 'none'), ('verb', 'break'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had broken a vase again.')]), OrderedDict([('ids', 'stim2'), ('kind', 'CONTROL'), ('verb', 'break'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had broken a vase.')]), OrderedDict([('ids', 'stim3'), ('kind', 'none'), ('verb', 'break'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Tom was breaking a vase again.')]), OrderedDict([('ids', 'stim4'), ('kind', 'CONTROL'), ('verb', 'break'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was breaking a vase.')]), OrderedDict([('ids', 'stim5'), ('kind', 'EXP'), ('verb', 'break'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had broken again.')]), OrderedDict([('ids', 'stim6'), ('kind', 'EXP'), ('verb', 'break'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had broken.')]), OrderedDict([('ids', 'stim7'), ('kind', 'EXP'), ('verb', 'break'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was breaking again.')]), OrderedDict([('ids', 'stim8'), ('kind', 'EXP'), ('verb', 'break'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was breaking.')]), OrderedDict([('ids', 'stim9'), ('kind', 'none'), ('verb', 'build'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Mary had built a house again.')]), OrderedDict([('ids', 'stim10'), ('kind', 'CONTROL'), ('verb', 'build'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had built a house.')]), OrderedDict([('ids', 'stim11'), ('kind', 'none'), ('verb', 'build'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Paul was building a house again.')]), OrderedDict([('ids', 'stim12'), ('kind', 'CONTROL'), ('verb', 'build'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Tom was building a house.')]), OrderedDict([('ids', 'stim13'), ('kind', 'EXP'), ('verb', 'build'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'John had built again.')]), OrderedDict([('ids', 'stim14'), ('kind', 'EXP'), ('verb', 'build'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had built.')]), OrderedDict([('ids', 'stim15'), ('kind', 'EXP'), ('verb', 'build'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Paul was building again.')]), OrderedDict([('ids', 'stim16'), ('kind', 'EXP'), ('verb', 'build'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was building.')]), OrderedDict([('ids', 'stim17'), ('kind', 'none'), ('verb', 'chop'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had chopped a log again.')]), OrderedDict([('ids', 'stim18'), ('kind', 'CONTROL'), ('verb', 'chop'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had chopped a log.')]), OrderedDict([('ids', 'stim19'), ('kind', 'none'), ('verb', 'chop'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was chopping a log again.')]), OrderedDict([('ids', 'stim20'), ('kind', 'CONTROL'), ('verb', 'chop'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was chopping a log.')]), OrderedDict([('ids', 'stim21'), ('kind', 'EXP'), ('verb', 'chop'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had chopped again.')]), OrderedDict([('ids', 'stim22'), ('kind', 'EXP'), ('verb', 'chop'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had chopped.')]), OrderedDict([('ids', 'stim23'), ('kind', 'EXP'), ('verb', 'chop'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was chopping again.')]), OrderedDict([('ids', 'stim24'), ('kind', 'EXP'), ('verb', 'chop'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was chopping.')]), OrderedDict([('ids', 'stim25'), ('kind', 'none'), ('verb', 'clean'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had cleaned a table again.')]), OrderedDict([('ids', 'stim26'), ('kind', 'CONTROL'), ('verb', 'clean'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Tom had cleaned a table.')]), OrderedDict([('ids', 'stim27'), ('kind', 'none'), ('verb', 'clean'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Clara was cleaning a table again.')]), OrderedDict([('ids', 'stim28'), ('kind', 'CONTROL'), ('verb', 'clean'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was cleaning a table.')]), OrderedDict([('ids', 'stim29'), ('kind', 'EXP'), ('verb', 'clean'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had cleaned again.')]), OrderedDict([('ids', 'stim30'), ('kind', 'EXP'), ('verb', 'clean'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had cleaned.')]), OrderedDict([('ids', 'stim31'), ('kind', 'EXP'), ('verb', 'clean'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Mary was cleaning again.')]), OrderedDict([('ids', 'stim32'), ('kind', 'EXP'), ('verb', 'clean'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Paul was cleaning.')]), OrderedDict([('ids', 'stim33'), ('kind', 'none'), ('verb', 'cook'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Clara had cooked dinner again.')]), OrderedDict([('ids', 'stim34'), ('kind', 'CONTROL'), ('verb', 'cook'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had cooked dinner.')]), OrderedDict([('ids', 'stim35'), ('kind', 'none'), ('verb', 'cook'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was cooking dinner again.')]), OrderedDict([('ids', 'stim36'), ('kind', 'CONTROL'), ('verb', 'cook'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sam was cooking dinner.')]), OrderedDict([('ids', 'stim37'), ('kind', 'EXP'), ('verb', 'cook'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Mary had cooked again.')]), OrderedDict([('ids', 'stim38'), ('kind', 'EXP'), ('verb', 'cook'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had cooked.')]), OrderedDict([('ids', 'stim39'), ('kind', 'EXP'), ('verb', 'cook'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was cooking again.')]), OrderedDict([('ids', 'stim40'), ('kind', 'EXP'), ('verb', 'cook'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Tom was cooking.')]), OrderedDict([('ids', 'stim41'), ('kind', 'none'), ('verb', 'cut'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Mary had cut some paper again.')]), OrderedDict([('ids', 'stim42'), ('kind', 'CONTROL'), ('verb', 'cut'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sarah had cut some paper.')]), OrderedDict([('ids', 'stim43'), ('kind', 'none'), ('verb', 'cut'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Paul was cutting some paper again.')]), OrderedDict([('ids', 'stim44'), ('kind', 'CONTROL'), ('verb', 'cut'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was cutting some paper.')]), OrderedDict([('ids', 'stim45'), ('kind', 'EXP'), ('verb', 'cut'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Mary had cut again.')]), OrderedDict([('ids', 'stim46'), ('kind', 'EXP'), ('verb', 'cut'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had cut.')]), OrderedDict([('ids', 'stim47'), ('kind', 'EXP'), ('verb', 'cut'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was cutting again.')]), OrderedDict([('ids', 'stim48'), ('kind', 'EXP'), ('verb', 'cut'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Clara was cutting.')]), OrderedDict([('ids', 'stim49'), ('kind', 'none'), ('verb', 'drink'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had drunk juice again.')]), OrderedDict([('ids', 'stim50'), ('kind', 'CONTROL'), ('verb', 'drink'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had drunk juice.')]), OrderedDict([('ids', 'stim51'), ('kind', 'none'), ('verb', 'drink'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was drinking juice again.')]), OrderedDict([('ids', 'stim52'), ('kind', 'CONTROL'), ('verb', 'drink'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was drinking juice.')]), OrderedDict([('ids', 'stim53'), ('kind', 'EXP'), ('verb', 'drink'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had drunk again.')]), OrderedDict([('ids', 'stim54'), ('kind', 'EXP'), ('verb', 'drink'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had drunk.')]), OrderedDict([('ids', 'stim55'), ('kind', 'EXP'), ('verb', 'drink'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was drinking again.')]), OrderedDict([('ids', 'stim56'), ('kind', 'EXP'), ('verb', 'drink'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was drinking.')]), OrderedDict([('ids', 'stim57'), ('kind', 'none'), ('verb', 'eat'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Clara had eaten pizza again.')]), OrderedDict([('ids', 'stim58'), ('kind', 'CONTROL'), ('verb', 'eat'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Tom had eaten pizza.')]), OrderedDict([('ids', 'stim59'), ('kind', 'none'), ('verb', 'eat'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was eating pizza again.')]), OrderedDict([('ids', 'stim60'), ('kind', 'CONTROL'), ('verb', 'eat'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was eating pizza.')]), OrderedDict([('ids', 'stim61'), ('kind', 'EXP'), ('verb', 'eat'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had eaten again.')]), OrderedDict([('ids', 'stim62'), ('kind', 'EXP'), ('verb', 'eat'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had eaten.')]), OrderedDict([('ids', 'stim63'), ('kind', 'EXP'), ('verb', 'eat'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was eating again.')]), OrderedDict([('ids', 'stim64'), ('kind', 'EXP'), ('verb', 'eat'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was eating.')]), OrderedDict([('ids', 'stim65'), ('kind', 'none'), ('verb', 'embroider'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had embroidered a tapestry again.')]), OrderedDict([('ids', 'stim66'), ('kind', 'CONTROL'), ('verb', 'embroider'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had embroidered a tapestry.')]), OrderedDict([('ids', 'stim67'), ('kind', 'none'), ('verb', 'embroider'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was embroidering a tapestry again.')]), OrderedDict([('ids', 'stim68'), ('kind', 'CONTROL'), ('verb', 'embroider'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was embroidering a tapestry.')]), OrderedDict([('ids', 'stim69'), ('kind', 'EXP'), ('verb', 'embroider'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had embroidered again.')]), OrderedDict([('ids', 'stim70'), ('kind', 'EXP'), ('verb', 'embroider'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had embroidered.')]), OrderedDict([('ids', 'stim71'), ('kind', 'EXP'), ('verb', 'embroider'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was embroidering again.')]), OrderedDict([('ids', 'stim72'), ('kind', 'EXP'), ('verb', 'embroider'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was embroidering.')]), OrderedDict([('ids', 'stim73'), ('kind', 'none'), ('verb', 'pour'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Mary had poured wine again.')]), OrderedDict([('ids', 'stim74'), ('kind', 'CONTROL'), ('verb', 'pour'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had poured wine.')]), OrderedDict([('ids', 'stim75'), ('kind', 'none'), ('verb', 'pour'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was pouring wine again.')]), OrderedDict([('ids', 'stim76'), ('kind', 'CONTROL'), ('verb', 'pour'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was pouring wine.')]), OrderedDict([('ids', 'stim77'), ('kind', 'EXP'), ('verb', 'pour'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had poured again.')]), OrderedDict([('ids', 'stim78'), ('kind', 'EXP'), ('verb', 'pour'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had poured.')]), OrderedDict([('ids', 'stim79'), ('kind', 'EXP'), ('verb', 'pour'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was pouring again.')]), OrderedDict([('ids', 'stim80'), ('kind', 'EXP'), ('verb', 'pour'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sam was pouring.')]), OrderedDict([('ids', 'stim81'), ('kind', 'none'), ('verb', 'sew'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Mary had sewn a curtain again.')]), OrderedDict([('ids', 'stim82'), ('kind', 'CONTROL'), ('verb', 'sew'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had sewn a curtain.')]), OrderedDict([('ids', 'stim83'), ('kind', 'none'), ('verb', 'sew'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Tom was sewing a curtain again.')]), OrderedDict([('ids', 'stim84'), ('kind', 'CONTROL'), ('verb', 'sew'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was sewing a curtain.')]), OrderedDict([('ids', 'stim85'), ('kind', 'EXP'), ('verb', 'sew'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sarah had sewn again.')]), OrderedDict([('ids', 'stim86'), ('kind', 'EXP'), ('verb', 'sew'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sarah had sewn.')]), OrderedDict([('ids', 'stim87'), ('kind', 'EXP'), ('verb', 'sew'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was sewing again.')]), OrderedDict([('ids', 'stim88'), ('kind', 'EXP'), ('verb', 'sew'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was sewing.')]), OrderedDict([('ids', 'stim89'), ('kind', 'none'), ('verb', 'steal'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had stolen money again.')]), OrderedDict([('ids', 'stim90'), ('kind', 'CONTROL'), ('verb', 'steal'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sarah had stolen money.')]), OrderedDict([('ids', 'stim91'), ('kind', 'none'), ('verb', 'steal'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Paul was stealing money again.')]), OrderedDict([('ids', 'stim92'), ('kind', 'CONTROL'), ('verb', 'steal'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was stealing money.')]), OrderedDict([('ids', 'stim93'), ('kind', 'EXP'), ('verb', 'steal'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had stolen again.')]), OrderedDict([('ids', 'stim94'), ('kind', 'EXP'), ('verb', 'steal'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had stolen.')]), OrderedDict([('ids', 'stim95'), ('kind', 'EXP'), ('verb', 'steal'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Paul was stealing again.')]), OrderedDict([('ids', 'stim96'), ('kind', 'EXP'), ('verb', 'steal'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was stealing.')]), OrderedDict([('ids', 'stim97'), ('kind', 'none'), ('verb', 'wash'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had washed a car again.')]), OrderedDict([('ids', 'stim98'), ('kind', 'CONTROL'), ('verb', 'wash'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had washed a car.')]), OrderedDict([('ids', 'stim99'), ('kind', 'none'), ('verb', 'wash'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was washing a car again.')]), OrderedDict([('ids', 'stim100'), ('kind', 'CONTROL'), ('verb', 'wash'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sam was washing a car.')]), OrderedDict([('ids', 'stim101'), ('kind', 'EXP'), ('verb', 'wash'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'John had washed again.')]), OrderedDict([('ids', 'stim102'), ('kind', 'EXP'), ('verb', 'wash'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had washed.')]), OrderedDict([('ids', 'stim103'), ('kind', 'EXP'), ('verb', 'wash'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sean was washing again.')]), OrderedDict([('ids', 'stim104'), ('kind', 'EXP'), ('verb', 'wash'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was washing.')]), OrderedDict([('ids', 'stim105'), ('kind', 'none'), ('verb', 'watch'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had watched a movie again.')]), OrderedDict([('ids', 'stim106'), ('kind', 'CONTROL'), ('verb', 'watch'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had watched a movie.')]), OrderedDict([('ids', 'stim107'), ('kind', 'none'), ('verb', 'watch'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Tom was watching a movie again.')]), OrderedDict([('ids', 'stim108'), ('kind', 'CONTROL'), ('verb', 'watch'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Clara was watching a movie.')]), OrderedDict([('ids', 'stim109'), ('kind', 'EXP'), ('verb', 'watch'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Mary had watched again.')]), OrderedDict([('ids', 'stim110'), ('kind', 'EXP'), ('verb', 'watch'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had watched.')]), OrderedDict([('ids', 'stim111'), ('kind', 'EXP'), ('verb', 'watch'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Mary was watching again.')]), OrderedDict([('ids', 'stim112'), ('kind', 'EXP'), ('verb', 'watch'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was watching.')]), OrderedDict([('ids', 'stim113'), ('kind', 'none'), ('verb', 'write'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had written a letter again.')]), OrderedDict([('ids', 'stim114'), ('kind', 'CONTROL'), ('verb', 'write'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had written a letter.')]), OrderedDict([('ids', 'stim115'), ('kind', 'none'), ('verb', 'write'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Clara was writing a letter again.')]), OrderedDict([('ids', 'stim116'), ('kind', 'CONTROL'), ('verb', 'write'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Paul was writing a letter.')]), OrderedDict([('ids', 'stim117'), ('kind', 'EXP'), ('verb', 'write'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had written again.')]), OrderedDict([('ids', 'stim118'), ('kind', 'EXP'), ('verb', 'write'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Tom had written.')]), OrderedDict([('ids', 'stim119'), ('kind', 'EXP'), ('verb', 'write'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was writing again.')]), OrderedDict([('ids', 'stim120'), ('kind', 'EXP'), ('verb', 'write'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was writing.')]), OrderedDict([('ids', 'stim121'), ('kind', 'none'), ('verb', 'behead'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Clara had beheaded a prisoner again.')]), OrderedDict([('ids', 'stim122'), ('kind', 'CONTROL'), ('verb', 'behead'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had beheaded a prisoner.')]), OrderedDict([('ids', 'stim123'), ('kind', 'none'), ('verb', 'behead'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Mary was beheading a prisoner again.')]), OrderedDict([('ids', 'stim124'), ('kind', 'CONTROL'), ('verb', 'behead'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was beheading a prisoner.')]), OrderedDict([('ids', 'stim125'), ('kind', 'EXP'), ('verb', 'behead'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had beheaded again.')]), OrderedDict([('ids', 'stim126'), ('kind', 'EXP'), ('verb', 'behead'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had beheaded.')]), OrderedDict([('ids', 'stim127'), ('kind', 'EXP'), ('verb', 'behead'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was beheading again.')]), OrderedDict([('ids', 'stim128'), ('kind', 'EXP'), ('verb', 'behead'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Clara was beheading.')]), OrderedDict([('ids', 'stim129'), ('kind', 'none'), ('verb', 'devour'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had devoured food again.')]), OrderedDict([('ids', 'stim130'), ('kind', 'CONTROL'), ('verb', 'devour'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had devoured food.')]), OrderedDict([('ids', 'stim131'), ('kind', 'none'), ('verb', 'devour'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Clara was devouring food again.')]), OrderedDict([('ids', 'stim132'), ('kind', 'CONTROL'), ('verb', 'devour'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was devouring food.')]), OrderedDict([('ids', 'stim133'), ('kind', 'EXP'), ('verb', 'devour'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had devoured again.')]), OrderedDict([('ids', 'stim134'), ('kind', 'EXP'), ('verb', 'devour'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had devoured.')]), OrderedDict([('ids', 'stim135'), ('kind', 'EXP'), ('verb', 'devour'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was devouring again.')]), OrderedDict([('ids', 'stim136'), ('kind', 'EXP'), ('verb', 'devour'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sarah was devouring.')]), OrderedDict([('ids', 'stim137'), ('kind', 'none'), ('verb', 'doodle'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had doodled a stick man again.')]), OrderedDict([('ids', 'stim138'), ('kind', 'CONTROL'), ('verb', 'doodle'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'John had doodled a stick man.')]), OrderedDict([('ids', 'stim139'), ('kind', 'none'), ('verb', 'doodle'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sean was doodling a stick man again.')]), OrderedDict([('ids', 'stim140'), ('kind', 'CONTROL'), ('verb', 'doodle'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was doodling a stick man.')]), OrderedDict([('ids', 'stim141'), ('kind', 'EXP'), ('verb', 'doodle'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Clara had doodled again.')]), OrderedDict([('ids', 'stim142'), ('kind', 'EXP'), ('verb', 'doodle'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had doodled.')]), OrderedDict([('ids', 'stim143'), ('kind', 'EXP'), ('verb', 'doodle'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was doodling again.')]), OrderedDict([('ids', 'stim144'), ('kind', 'EXP'), ('verb', 'doodle'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was doodling.')]), OrderedDict([('ids', 'stim145'), ('kind', 'none'), ('verb', 'kill'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had killed pests again.')]), OrderedDict([('ids', 'stim146'), ('kind', 'CONTROL'), ('verb', 'kill'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had killed pests.')]), OrderedDict([('ids', 'stim147'), ('kind', 'none'), ('verb', 'kill'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was killing pests again.')]), OrderedDict([('ids', 'stim148'), ('kind', 'CONTROL'), ('verb', 'kill'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was killing pests.')]), OrderedDict([('ids', 'stim149'), ('kind', 'EXP'), ('verb', 'kill'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had killed again.')]), OrderedDict([('ids', 'stim150'), ('kind', 'EXP'), ('verb', 'kill'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'John had killed.')]), OrderedDict([('ids', 'stim151'), ('kind', 'EXP'), ('verb', 'kill'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was killing again.')]), OrderedDict([('ids', 'stim152'), ('kind', 'EXP'), ('verb', 'kill'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was killing.')]), OrderedDict([('ids', 'stim153'), ('kind', 'none'), ('verb', 'knife'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had knifed an enemy again.')]), OrderedDict([('ids', 'stim154'), ('kind', 'CONTROL'), ('verb', 'knife'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had knifed an enemy.')]), OrderedDict([('ids', 'stim155'), ('kind', 'none'), ('verb', 'knife'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was knifing an enemy again.')]), OrderedDict([('ids', 'stim156'), ('kind', 'CONTROL'), ('verb', 'knife'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was knifing an enemy.')]), OrderedDict([('ids', 'stim157'), ('kind', 'EXP'), ('verb', 'knife'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sarah had knifed again.')]), OrderedDict([('ids', 'stim158'), ('kind', 'EXP'), ('verb', 'knife'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'John had knifed.')]), OrderedDict([('ids', 'stim159'), ('kind', 'EXP'), ('verb', 'knife'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Mary was knifing again.')]), OrderedDict([('ids', 'stim160'), ('kind', 'EXP'), ('verb', 'knife'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was knifing.')]), OrderedDict([('ids', 'stim161'), ('kind', 'none'), ('verb', 'poison'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had poisoned a plant again.')]), OrderedDict([('ids', 'stim162'), ('kind', 'CONTROL'), ('verb', 'poison'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had poisoned a plant.')]), OrderedDict([('ids', 'stim163'), ('kind', 'none'), ('verb', 'poison'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was poisoning a plant again.')]), OrderedDict([('ids', 'stim164'), ('kind', 'CONTROL'), ('verb', 'poison'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sam was poisoning a plant.')]), OrderedDict([('ids', 'stim165'), ('kind', 'EXP'), ('verb', 'poison'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'John had poisoned again.')]), OrderedDict([('ids', 'stim166'), ('kind', 'EXP'), ('verb', 'poison'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sarah had poisoned.')]), OrderedDict([('ids', 'stim167'), ('kind', 'EXP'), ('verb', 'poison'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was poisoning again.')]), OrderedDict([('ids', 'stim168'), ('kind', 'EXP'), ('verb', 'poison'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Paul was poisoning.')]), OrderedDict([('ids', 'stim169'), ('kind', 'none'), ('verb', 'sign'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had signed a paper again.')]), OrderedDict([('ids', 'stim170'), ('kind', 'CONTROL'), ('verb', 'sign'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'John had signed a paper.')]), OrderedDict([('ids', 'stim171'), ('kind', 'none'), ('verb', 'sign'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was signing a paper again.')]), OrderedDict([('ids', 'stim172'), ('kind', 'CONTROL'), ('verb', 'sign'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Clara was signing a paper.')]), OrderedDict([('ids', 'stim173'), ('kind', 'EXP'), ('verb', 'sign'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had signed again.')]), OrderedDict([('ids', 'stim174'), ('kind', 'EXP'), ('verb', 'sign'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had signed.')]), OrderedDict([('ids', 'stim175'), ('kind', 'EXP'), ('verb', 'sign'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Clara was signing again.')]), OrderedDict([('ids', 'stim176'), ('kind', 'EXP'), ('verb', 'sign'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sarah was signing.')]), OrderedDict([('ids', 'stim177'), ('kind', 'none'), ('verb', 'sip'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had sipped water again.')]), OrderedDict([('ids', 'stim178'), ('kind', 'CONTROL'), ('verb', 'sip'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had sipped water.')]), OrderedDict([('ids', 'stim179'), ('kind', 'none'), ('verb', 'sip'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was sipping water again.')]), OrderedDict([('ids', 'stim180'), ('kind', 'CONTROL'), ('verb', 'sip'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was sipping water.')]), OrderedDict([('ids', 'stim181'), ('kind', 'EXP'), ('verb', 'sip'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'John had sipped again.')]), OrderedDict([('ids', 'stim182'), ('kind', 'EXP'), ('verb', 'sip'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had sipped.')]), OrderedDict([('ids', 'stim183'), ('kind', 'EXP'), ('verb', 'sip'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was sipping again.')]), OrderedDict([('ids', 'stim184'), ('kind', 'EXP'), ('verb', 'sip'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was sipping.')]), OrderedDict([('ids', 'stim185'), ('kind', 'none'), ('verb', 'smoke'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had smoked a cigarette again.')]), OrderedDict([('ids', 'stim186'), ('kind', 'CONTROL'), ('verb', 'smoke'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had smoked a cigarette.')]), OrderedDict([('ids', 'stim187'), ('kind', 'none'), ('verb', 'smoke'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was smoking a cigarette again.')]), OrderedDict([('ids', 'stim188'), ('kind', 'CONTROL'), ('verb', 'smoke'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was smoking a cigarette.')]), OrderedDict([('ids', 'stim189'), ('kind', 'EXP'), ('verb', 'smoke'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had smoked again.')]), OrderedDict([('ids', 'stim190'), ('kind', 'EXP'), ('verb', 'smoke'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sarah had smoked.')]), OrderedDict([('ids', 'stim191'), ('kind', 'EXP'), ('verb', 'smoke'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was smoking again.')]), OrderedDict([('ids', 'stim192'), ('kind', 'EXP'), ('verb', 'smoke'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Tom was smoking.')]), OrderedDict([('ids', 'stim193'), ('kind', 'none'), ('verb', 'swig'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had swigged beer again.')]), OrderedDict([('ids', 'stim194'), ('kind', 'CONTROL'), ('verb', 'swig'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had swigged beer.')]), OrderedDict([('ids', 'stim195'), ('kind', 'none'), ('verb', 'swig'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Clara was swigging beer again.')]), OrderedDict([('ids', 'stim196'), ('kind', 'CONTROL'), ('verb', 'swig'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Clara was swigging beer.')]), OrderedDict([('ids', 'stim197'), ('kind', 'EXP'), ('verb', 'swig'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had swigged again.')]), OrderedDict([('ids', 'stim198'), ('kind', 'EXP'), ('verb', 'swig'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had swigged.')]), OrderedDict([('ids', 'stim199'), ('kind', 'EXP'), ('verb', 'swig'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was swigging again.')]), OrderedDict([('ids', 'stim200'), ('kind', 'EXP'), ('verb', 'swig'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sarah was swigging.')]), OrderedDict([('ids', 'stim201'), ('kind', 'none'), ('verb', 'polish'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Clara had polished a sword again.')]), OrderedDict([('ids', 'stim202'), ('kind', 'CONTROL'), ('verb', 'polish'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had polished a sword.')]), OrderedDict([('ids', 'stim203'), ('kind', 'none'), ('verb', 'polish'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Tom was polishing a sword again.')]), OrderedDict([('ids', 'stim204'), ('kind', 'CONTROL'), ('verb', 'polish'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Paul was polishing a sword.')]), OrderedDict([('ids', 'stim205'), ('kind', 'EXP'), ('verb', 'polish'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had polished again.')]), OrderedDict([('ids', 'stim206'), ('kind', 'EXP'), ('verb', 'polish'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had polished.')]), OrderedDict([('ids', 'stim207'), ('kind', 'EXP'), ('verb', 'polish'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was polishing again.')]), OrderedDict([('ids', 'stim208'), ('kind', 'EXP'), ('verb', 'polish'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sarah was polishing.')]), OrderedDict([('ids', 'stim209'), ('kind', 'none'), ('verb', 'teach'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Clara had taught linguistics again.')]), OrderedDict([('ids', 'stim210'), ('kind', 'CONTROL'), ('verb', 'teach'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had taught linguistics.')]), OrderedDict([('ids', 'stim211'), ('kind', 'none'), ('verb', 'teach'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was teaching linguistics again.')]), OrderedDict([('ids', 'stim212'), ('kind', 'CONTROL'), ('verb', 'teach'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was teaching linguistics.')]), OrderedDict([('ids', 'stim213'), ('kind', 'EXP'), ('verb', 'teach'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had taught again.')]), OrderedDict([('ids', 'stim214'), ('kind', 'EXP'), ('verb', 'teach'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had taught.')]), OrderedDict([('ids', 'stim215'), ('kind', 'EXP'), ('verb', 'teach'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was teaching again.')]), OrderedDict([('ids', 'stim216'), ('kind', 'EXP'), ('verb', 'teach'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Paul was teaching.')]), OrderedDict([('ids', 'stim217'), ('kind', 'none'), ('verb', 'sing'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had sung a carol again.')]), OrderedDict([('ids', 'stim218'), ('kind', 'CONTROL'), ('verb', 'sing'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Tom had sung a carol.')]), OrderedDict([('ids', 'stim219'), ('kind', 'none'), ('verb', 'sing'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was singing a carol again.')]), OrderedDict([('ids', 'stim220'), ('kind', 'CONTROL'), ('verb', 'sing'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sarah was singing a carol.')]), OrderedDict([('ids', 'stim221'), ('kind', 'EXP'), ('verb', 'sing'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had sung again.')]), OrderedDict([('ids', 'stim222'), ('kind', 'EXP'), ('verb', 'sing'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'John had sung.')]), OrderedDict([('ids', 'stim223'), ('kind', 'EXP'), ('verb', 'sing'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was singing again.')]), OrderedDict([('ids', 'stim224'), ('kind', 'EXP'), ('verb', 'sing'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was singing.')]), OrderedDict([('ids', 'stim225'), ('kind', 'none'), ('verb', 'hum'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'John had hummed a lullaby again.')]), OrderedDict([('ids', 'stim226'), ('kind', 'CONTROL'), ('verb', 'hum'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had hummed a lullaby.')]), OrderedDict([('ids', 'stim227'), ('kind', 'none'), ('verb', 'hum'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was humming a lullaby again.')]), OrderedDict([('ids', 'stim228'), ('kind', 'CONTROL'), ('verb', 'hum'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was humming a lullaby.')]), OrderedDict([('ids', 'stim229'), ('kind', 'EXP'), ('verb', 'hum'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had hummed again.')]), OrderedDict([('ids', 'stim230'), ('kind', 'EXP'), ('verb', 'hum'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had hummed.')]), OrderedDict([('ids', 'stim231'), ('kind', 'EXP'), ('verb', 'hum'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was humming again.')]), OrderedDict([('ids', 'stim232'), ('kind', 'EXP'), ('verb', 'hum'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Paul was humming.')]), OrderedDict([('ids', 'stim233'), ('kind', 'none'), ('verb', 'slice'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had sliced some pie again.')]), OrderedDict([('ids', 'stim234'), ('kind', 'CONTROL'), ('verb', 'slice'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had sliced some pie.')]), OrderedDict([('ids', 'stim235'), ('kind', 'none'), ('verb', 'slice'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Paul was slicing some pie again.')]), OrderedDict([('ids', 'stim236'), ('kind', 'CONTROL'), ('verb', 'slice'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was slicing some pie.')]), OrderedDict([('ids', 'stim237'), ('kind', 'EXP'), ('verb', 'slice'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had sliced again.')]), OrderedDict([('ids', 'stim238'), ('kind', 'EXP'), ('verb', 'slice'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had sliced.')]), OrderedDict([('ids', 'stim239'), ('kind', 'EXP'), ('verb', 'slice'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sean was slicing again.')]), OrderedDict([('ids', 'stim240'), ('kind', 'EXP'), ('verb', 'slice'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sarah was slicing.')]), OrderedDict([('ids', 'stim241'), ('kind', 'FILLER'), ('verb', 'sleep'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'John had slept a pillow again.')]), OrderedDict([('ids', 'stim242'), ('kind', 'FILLER'), ('verb', 'sleep'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had slept a pillow.')]), OrderedDict([('ids', 'stim243'), ('kind', 'FILLER'), ('verb', 'sleep'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sean was sleeping a pillow again.')]), OrderedDict([('ids', 'stim244'), ('kind', 'FILLER'), ('verb', 'sleep'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sam was sleeping a pillow.')]), OrderedDict([('ids', 'stim245'), ('kind', 'none'), ('verb', 'sleep'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had slept again.')]), OrderedDict([('ids', 'stim246'), ('kind', 'CONTROL'), ('verb', 'sleep'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had slept.')]), OrderedDict([('ids', 'stim247'), ('kind', 'none'), ('verb', 'sleep'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was sleeping again.')]), OrderedDict([('ids', 'stim248'), ('kind', 'CONTROL'), ('verb', 'sleep'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was sleeping.')]), OrderedDict([('ids', 'stim249'), ('kind', 'FILLER'), ('verb', 'die'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had died a grave again.')]), OrderedDict([('ids', 'stim250'), ('kind', 'FILLER'), ('verb', 'die'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had died a grave.')]), OrderedDict([('ids', 'stim251'), ('kind', 'FILLER'), ('verb', 'die'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sean was dying a grave again.')]), OrderedDict([('ids', 'stim252'), ('kind', 'FILLER'), ('verb', 'die'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was dying a grave.')]), OrderedDict([('ids', 'stim253'), ('kind', 'none'), ('verb', 'die'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had died again.')]), OrderedDict([('ids', 'stim254'), ('kind', 'CONTROL'), ('verb', 'die'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had died.')]), OrderedDict([('ids', 'stim255'), ('kind', 'none'), ('verb', 'die'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was dying again.')]), OrderedDict([('ids', 'stim256'), ('kind', 'CONTROL'), ('verb', 'die'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was dying.')]), OrderedDict([('ids', 'stim257'), ('kind', 'FILLER'), ('verb', 'knock'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had knocked a door again.')]), OrderedDict([('ids', 'stim258'), ('kind', 'FILLER'), ('verb', 'knock'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had knocked a door.')]), OrderedDict([('ids', 'stim259'), ('kind', 'FILLER'), ('verb', 'knock'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Clara was knocking a door again.')]), OrderedDict([('ids', 'stim260'), ('kind', 'FILLER'), ('verb', 'knock'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was knocking a door.')]), OrderedDict([('ids', 'stim261'), ('kind', 'none'), ('verb', 'knock'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had knocked again.')]), OrderedDict([('ids', 'stim262'), ('kind', 'CONTROL'), ('verb', 'knock'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sean had knocked.')]), OrderedDict([('ids', 'stim263'), ('kind', 'none'), ('verb', 'knock'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was knocking again.')]), OrderedDict([('ids', 'stim264'), ('kind', 'CONTROL'), ('verb', 'knock'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was knocking.')]), OrderedDict([('ids', 'stim265'), ('kind', 'FILLER'), ('verb', 'live'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had lived a studio again.')]), OrderedDict([('ids', 'stim266'), ('kind', 'FILLER'), ('verb', 'live'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sam had lived a studio.')]), OrderedDict([('ids', 'stim267'), ('kind', 'FILLER'), ('verb', 'live'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was living a studio again.')]), OrderedDict([('ids', 'stim268'), ('kind', 'FILLER'), ('verb', 'live'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Clara was living a studio.')]), OrderedDict([('ids', 'stim269'), ('kind', 'none'), ('verb', 'live'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Clara had lived again.')]), OrderedDict([('ids', 'stim270'), ('kind', 'CONTROL'), ('verb', 'live'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had lived.')]), OrderedDict([('ids', 'stim271'), ('kind', 'none'), ('verb', 'live'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Paul was living again.')]), OrderedDict([('ids', 'stim272'), ('kind', 'CONTROL'), ('verb', 'live'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was living.')]), OrderedDict([('ids', 'stim273'), ('kind', 'FILLER'), ('verb', 'remain'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had remained a office again.')]), OrderedDict([('ids', 'stim274'), ('kind', 'FILLER'), ('verb', 'remain'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Tom had remained a office.')]), OrderedDict([('ids', 'stim275'), ('kind', 'FILLER'), ('verb', 'remain'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Clara was remaining a office again.')]), OrderedDict([('ids', 'stim276'), ('kind', 'FILLER'), ('verb', 'remain'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'John was remaining a office.')]), OrderedDict([('ids', 'stim277'), ('kind', 'none'), ('verb', 'remain'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had remained again.')]), OrderedDict([('ids', 'stim278'), ('kind', 'CONTROL'), ('verb', 'remain'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had remained.')]), OrderedDict([('ids', 'stim279'), ('kind', 'none'), ('verb', 'remain'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Mary was remaining again.')]), OrderedDict([('ids', 'stim280'), ('kind', 'CONTROL'), ('verb', 'remain'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was remaining.')]), OrderedDict([('ids', 'stim281'), ('kind', 'FILLER'), ('verb', 'laugh'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Tom had laughed a joke again.')]), OrderedDict([('ids', 'stim282'), ('kind', 'FILLER'), ('verb', 'laugh'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had laughed a joke.')]), OrderedDict([('ids', 'stim283'), ('kind', 'FILLER'), ('verb', 'laugh'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Tom was laughing a joke again.')]), OrderedDict([('ids', 'stim284'), ('kind', 'FILLER'), ('verb', 'laugh'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sam was laughing a joke.')]), OrderedDict([('ids', 'stim285'), ('kind', 'none'), ('verb', 'laugh'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had laughed again.')]), OrderedDict([('ids', 'stim286'), ('kind', 'CONTROL'), ('verb', 'laugh'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'John had laughed.')]), OrderedDict([('ids', 'stim287'), ('kind', 'none'), ('verb', 'laugh'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was laughing again.')]), OrderedDict([('ids', 'stim288'), ('kind', 'CONTROL'), ('verb', 'laugh'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Paul was laughing.')]), OrderedDict([('ids', 'stim289'), ('kind', 'FILLER'), ('verb', 'clap'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had clapped a show again.')]), OrderedDict([('ids', 'stim290'), ('kind', 'FILLER'), ('verb', 'clap'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Sarah had clapped a show.')]), OrderedDict([('ids', 'stim291'), ('kind', 'FILLER'), ('verb', 'clap'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Betty was clapping a show again.')]), OrderedDict([('ids', 'stim292'), ('kind', 'FILLER'), ('verb', 'clap'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was clapping a show.')]), OrderedDict([('ids', 'stim293'), ('kind', 'none'), ('verb', 'clap'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sean had clapped again.')]), OrderedDict([('ids', 'stim294'), ('kind', 'CONTROL'), ('verb', 'clap'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Paul had clapped.')]), OrderedDict([('ids', 'stim295'), ('kind', 'none'), ('verb', 'clap'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was clapping again.')]), OrderedDict([('ids', 'stim296'), ('kind', 'CONTROL'), ('verb', 'clap'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was clapping.')]), OrderedDict([('ids', 'stim297'), ('kind', 'FILLER'), ('verb', 'smile'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'John had smiled a friend again.')]), OrderedDict([('ids', 'stim298'), ('kind', 'FILLER'), ('verb', 'smile'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Mary had smiled a friend.')]), OrderedDict([('ids', 'stim299'), ('kind', 'FILLER'), ('verb', 'smile'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sarah was smiling a friend again.')]), OrderedDict([('ids', 'stim300'), ('kind', 'FILLER'), ('verb', 'smile'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was smiling a friend.')]), OrderedDict([('ids', 'stim301'), ('kind', 'none'), ('verb', 'smile'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Sam had smiled again.')]), OrderedDict([('ids', 'stim302'), ('kind', 'CONTROL'), ('verb', 'smile'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Diana had smiled.')]), OrderedDict([('ids', 'stim303'), ('kind', 'none'), ('verb', 'smile'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Diana was smiling again.')]), OrderedDict([('ids', 'stim304'), ('kind', 'CONTROL'), ('verb', 'smile'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was smiling.')]), OrderedDict([('ids', 'stim305'), ('kind', 'FILLER'), ('verb', 'scream'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Diana had screamed a spider again.')]), OrderedDict([('ids', 'stim306'), ('kind', 'FILLER'), ('verb', 'scream'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had screamed a spider.')]), OrderedDict([('ids', 'stim307'), ('kind', 'FILLER'), ('verb', 'scream'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Sam was screaming a spider again.')]), OrderedDict([('ids', 'stim308'), ('kind', 'FILLER'), ('verb', 'scream'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Diana was screaming a spider.')]), OrderedDict([('ids', 'stim309'), ('kind', 'none'), ('verb', 'scream'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had screamed again.')]), OrderedDict([('ids', 'stim310'), ('kind', 'CONTROL'), ('verb', 'scream'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Betty had screamed.')]), OrderedDict([('ids', 'stim311'), ('kind', 'none'), ('verb', 'scream'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was screaming again.')]), OrderedDict([('ids', 'stim312'), ('kind', 'CONTROL'), ('verb', 'scream'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Betty was screaming.')]), OrderedDict([('ids', 'stim313'), ('kind', 'FILLER'), ('verb', 'rest'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Betty had rested a bed again.')]), OrderedDict([('ids', 'stim314'), ('kind', 'FILLER'), ('verb', 'rest'), ('dObj', 'yes'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had rested a bed.')]), OrderedDict([('ids', 'stim315'), ('kind', 'FILLER'), ('verb', 'rest'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'Mary was resting a bed again.')]), OrderedDict([('ids', 'stim316'), ('kind', 'FILLER'), ('verb', 'rest'), ('dObj', 'yes'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Mary was resting a bed.')]), OrderedDict([('ids', 'stim317'), ('kind', 'none'), ('verb', 'rest'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'yes'), ('sentence', 'Paul had rested again.')]), OrderedDict([('ids', 'stim318'), ('kind', 'CONTROL'), ('verb', 'rest'), ('dObj', 'no'), ('perf', 'yes'), ('iter', 'no'), ('sentence', 'Clara had rested.')]), OrderedDict([('ids', 'stim319'), ('kind', 'none'), ('verb', 'rest'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'yes'), ('sentence', 'John was resting again.')]), OrderedDict([('ids', 'stim320'), ('kind', 'CONTROL'), ('verb', 'rest'), ('dObj', 'no'), ('perf', 'no'), ('iter', 'no'), ('sentence', 'Sean was resting.')])]" valType="str" updates="None"/>
      <Param name="conditionsFile" val="resources/stimuli_ita.csv" valType="str" updates="None"/>
      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>
      <Param name="isTrials" val="True" valType="bool" updates="None"/>
      <Param name="loopType" val="random" valType="str" updates="None"/>
      <Param name="nReps" val="1" valType="code" updates="None"/>
      <Param name="name" val="trials" valType="code" updates="None"/>
      <Param name="random seed" val="" valType="code" updates="None"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>
